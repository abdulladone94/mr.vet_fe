import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import DoctorTable from '@/components/Table/DoctorTable';
import SearchFilters from '@/components/SearchFilters';
import { useEffect, useMemo, useState } from 'react';
import { ExclamationCircleFilled } from '@ant-design/icons';
import api from '@/api';
import { useDoctors } from '@/context/doctorContext';
import { Button, Modal, Space, Typography } from 'antd';
import { useRouter } from 'next/router';
import toast from 'react-hot-toast';
import MenuLayout from '@/components/Layout/MenuLayout';
import Text from '@/components/UI/Text/Typography ';
import Link from 'next/link';
import FilledButton from '@/components/UI/Buttons/FilledButton';
import { CREATE_DOCTOR_ROUTE } from '@/components/constants/routes';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [allDoctors, setAllDoctors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchRes, setSearchRes] = useState([]);

  const { searchValue, setSearchValue } = useDoctors();

  const router = useRouter();
  const { confirm } = Modal;
  const { Title } = Typography;

  const mapData = (row) => ({
    id: row.id,
    fName: row.first_name,
    lName: row.last_name,
    email: row.email,
    mobile: row.phone_number,
    reportCount: row.report_count,
    // hospital: row.hospital_name,
    // qualification: row.qualifications,
    registration: row.registration_number,
  });

  const getAllDoctors = async () => {
    setLoading(true);
    try {
      const response = await api.doctor.getAllDoctors({
        pageNo: '1',
        noOfItem: '10000',
      });
      setAllDoctors(response.data.results?.map(mapData) || []);
    } catch (error) {
      console.log(error);
    }
    setLoading(false);
  };

  const searchDoctors = async () => {
    if (searchValue?.length > 0) {
      try {
        const response = await api.doctor.searchDoctor({
          name: searchValue,
          pageNo: '1',
          noOfItem: '10000',
        });
        setSearchRes(response.data.results?.map(mapData) || []);
      } catch (error) {
        console.log(error);
      }
    }
  };

  useEffect(() => {
    getAllDoctors();
  }, []);

  useEffect(() => {
    searchDoctors();
    console.log(searchValue);
  }, [searchValue]);

  const data = useMemo(() => {
    return searchValue?.length > 0 ? searchRes : allDoctors;
  }, [searchValue, allDoctors, searchRes]);

  const columns = [
    {
      title: 'First Name',
      dataIndex: 'fName',
      key: 'name',
      render: (text, id) => <Link href={`/doctors/${id.id}`}>{text}</Link>,
    },
    {
      title: 'Last Name',
      dataIndex: 'lName',
      key: 'lName',
    },
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: 'Mobile No',
      dataIndex: 'mobile',
      key: 'mobile',
    },
    // {
    //   title: 'Hospital Name',
    //   dataIndex: 'hospital',
    //   key: 'hospital',
    // },
    // {
    //   title: 'Qualification',
    //   dataIndex: 'qualification',
    //   key: 'qualification',
    // },
    {
      title: 'Registration No',
      dataIndex: 'registration',
      key: 'registration',
    },

    {
      title: 'Action',
      key: 'action',
      render: (_, record) => {
        const disabled = record.reportCount > 0;
        return (
          <Space size="middle">
            <Button
              onClick={() => {
                router.push({
                  pathname: '/doctors/createDoctor',
                  query: { doctor: JSON.stringify(record) },
                });
              }}
            >
              Edit
            </Button>
            <Button
              disabled={disabled}
              onClick={() => {
                showConfirm(record.id);
                console.log(record);
                console.log(allDoctors);
              }}
            >
              Delete
            </Button>
          </Space>
        );
      },
    },
  ];

  const showConfirm = (id) => {
    confirm({
      title: 'Do you want to delete this Doctor?',
      icon: <ExclamationCircleFilled />,
      okText: 'Yes',
      cancelText: 'No',
      okButtonProps: {
        style: {
          backgroundColor: '#f7a360',
          color: 'white',
        },
      },
      onOk() {
        handleDelete(id);
      },
    });
  };

  const handleDelete = async (id) => {
    try {
      await api.doctor.deleteDoctor({ id: `${id}` });
      toast.success('Doctor deleted successfully');
      getAllDoctors();
    } catch (error) {
      toast.error('Something went wrong, Try again later!');
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>Doctors</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className="flex items-center justify-between w-full h-10 mx-1 my-5 md:mx-20">
          <Text title="Manage Doctors" />
          <Link href={CREATE_DOCTOR_ROUTE}>
            <FilledButton variant="primary" label="Add Doctor" />
          </Link>
        </div>

        <SearchFilters
          setSearchValue={setSearchValue}
          placeholder="Search doctor"
        />

        <MenuLayout>
          <DoctorTable data={data} columns={columns} />
        </MenuLayout>

        {/* <DoctorTable data={data} columns={columns} /> */}
      </main>
    </>
  );
}
