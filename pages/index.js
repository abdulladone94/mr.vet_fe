import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import DoctorTable from '@/components/Table/DoctorTable';
import SearchFilters from '@/components/SearchFilters';
import { useEffect, useMemo, useState } from 'react';
import { ExclamationCircleFilled } from '@ant-design/icons';
import api from '@/api';
import { useDoctors } from '@/context/doctorContext';
import { Modal, Space } from 'antd';
import { useRouter } from 'next/router';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [allDoctors, setAllDoctors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchRes, setSearchRes] = useState([]);

  const { searchValue, setSearchValue } = useDoctors();

  const router = useRouter();
  const { confirm } = Modal;

  const mapData = (row) => ({
    id: row.id,
    fName: row.first_name,
    lName: row.last_name,
    email: row.email,
    mobile: row.phone_number,
    hospital: row.hospital_name,
    qualification: row.qualifications,
    registration: row.registration_number,
  });

  const getAllDoctors = async () => {
    setLoading(true);
    try {
      const response = await api.doctor.getAllDoctors({
        pageNo: '1',
        noOfItem: '8',
      });
      setAllDoctors(response.data.results?.map(mapData) || []);
    } catch (error) {
      console.log(error);
    }
    setLoading(false);
  };

  const searchDoctors = async () => {
    if (searchValue?.length > 0) {
      try {
        const response = await api.doctor.searchDoctor({
          name: searchValue,
          pageNo: '1',
          noOfItem: '10',
        });
        setSearchRes(response.data.results?.map(mapData) || []);
      } catch (error) {
        console.log(error);
      }
    }
  };

  useEffect(() => {
    getAllDoctors();
  }, []);

  useEffect(() => {
    searchDoctors();
    console.log(searchValue);
  }, [searchValue]);

  const data = useMemo(() => {
    return searchValue?.length > 0 ? searchRes : allDoctors;
  }, [searchValue, allDoctors, searchRes]);

  const columns = [
    {
      title: 'First Name',
      dataIndex: 'fName',
      key: 'name',
      render: (text, id) => <a href={`/doctors/${id.id}`}>{text}</a>,
    },
    {
      title: 'Last Name',
      dataIndex: 'lName',
      key: 'lName',
    },
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: 'Mobile No',
      dataIndex: 'mobile',
      key: 'mobile',
    },
    {
      title: 'Hospital Name',
      dataIndex: 'hospital',
      key: 'hospital',
    },
    {
      title: 'Qualification',
      dataIndex: 'qualification',
      key: 'qualification',
    },
    {
      title: 'Registration No',
      dataIndex: 'registration',
      key: 'registration',
    },

    {
      title: 'Action',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <a
            onClick={() => {
              router.push({
                pathname: '/doctors/createDoctor',
                query: { doctor: JSON.stringify(record) },
              });
            }}
          >
            Edit
          </a>
          <a
            onClick={() => {
              showConfirm(record.id);
              console.log(record);
            }}
          >
            Delete
          </a>
        </Space>
      ),
    },
  ];

  const showConfirm = (id) => {
    confirm({
      title: 'Do you want to delete this Doctor?',
      icon: <ExclamationCircleFilled />,
      okText: 'Yes',
      cancelText: 'No',
      okButtonProps: {
        style: {
          backgroundColor: '#f7a360',
          color: 'white',
        },
      },
      onOk() {
        handleDelete(id);
      },
    });
  };

  const handleDelete = async (id) => {
    try {
      await api.doctor.deleteDoctor({ id: `${id}` });
      getAllDoctors();
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <>
      <Head>
        <title>Doctors</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <SearchFilters
          setSearchValue={setSearchValue}
          placeholder="Search Doctor"
        />

        <DoctorTable data={data} columns={columns} />
      </main>
    </>
  );
}
