import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import LoginPage from './auth/login';
import DoctorTable from '@/components/Table/DoctorTable';
import { Space, Typography } from 'antd';
import SearchFilters from '@/components/SearchFilters';
import BreadCrumb from '@/components/BreadCrumb';
import { useEffect, useMemo, useState } from 'react';
import api from '@/api';
import { useRouter } from 'next/router';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const router = useRouter();

  const { searchKey } = router.query;
  const [allDoctors, setAllDoctors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchRes, setSearchRes] = useState([]);
  const [searchValue, setSearchValue] = useState(searchKey);

  console.log(searchKey);

  const getAllDoctors = async () => {
    setLoading(true);
    try {
      const response = await api.doctor.getAllDoctors({
        pageNo: '1',
        noOfItem: '8',
      });
      setAllDoctors(response.data.results || []);
      // console.log(setAllDoctors(response.results || []));
    } catch (error) {
      console.log(error);
    }
    setLoading(false);
  };

  const searchDoctors = async () => {
    if (searchKey?.length > 0) {
      try {
        const response = await api.doctor.searchDoctor({
          name: searchKey,
          pageNo: '1',
          noOfItem: '10',
        });
        setSearchRes(response.data.results || []);
      } catch (error) {
        console.log(error);
      }
    }
  };

  useEffect(() => {
    getAllDoctors();
  }, []);

  useEffect(() => {
    searchDoctors();
  }, [searchKey]);
  console.log(allDoctors);

  // if (loading) {
  //   return <div>Loading...</div>;
  // }

  const columns = [
    {
      title: 'First Name',
      dataIndex: 'fName',
      key: 'name',
      render: (text) => <a>{text}</a>,
    },
    {
      title: 'Last Name',
      dataIndex: 'lName',
      key: 'lName',
    },
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: 'Mobile No',
      dataIndex: 'mobile',
      key: 'mobile',
    },
    {
      title: 'Hospital Name',
      dataIndex: 'hospital',
      key: 'hospital',
    },
    {
      title: 'Qualification',
      dataIndex: 'qualification',
      key: 'qualification',
    },
    {
      title: 'Registration No',
      dataIndex: 'registration',
      key: 'registration',
    },

    {
      title: 'Action',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <a>Edit</a>
          <a>Delete</a>
        </Space>
      ),
    },
  ];

  const mapData = (row) => ({
    fName: row.first_name,
    lName: row.last_name,
    email: row.email,
    mobile: row.phone_number,
    hospital: row.hospital_name,
    qualification: row.qualifications,
    registration: row.registration_number,
  });

  const data = useMemo(() => {
    console.log(searchKey);
    return searchKey?.length >= 0
      ? searchRes.map(mapData)
      : allDoctors.map(mapData);
  }, [searchKey, allDoctors, searchRes, searchValue]);
  // searchKey.length === 0 ? searchRes.map(mapData) : allDoctors.map(mapData);

  // const data = allDoctors.map((row) => ({
  //   fName: row.first_name,
  //   lName: row.last_name,
  //   email: row.email,
  //   mobile: row.phone_number,
  //   hospital: row.hospital_name,
  //   qualification: row.qualifications,
  //   registration: row.registration_number,
  // }));

  return (
    <>
      <Head>
        <title>Doctors</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {/* <BreadCrumb /> */}
        <SearchFilters
          setSearchValue={setSearchValue}
          placeholder="Search Doctor"
        />
        {/* <Typography.Title
          level={1}
          style={{
            margin: 0,
            textAlign: 'left',
          }}
        >
          Doctors
        </Typography.Title> */}
        <DoctorTable data={data} columns={columns} />
      </main>
    </>
  );
}
